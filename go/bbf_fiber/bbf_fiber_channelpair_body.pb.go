// Code generated by protoc-gen-go. DO NOT EDIT.
// source: voltha_protos/bbf_fiber_channelpair_body.proto

package bbf_fiber

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChannelpairConfigData struct {
	ChannelgroupRef      string            `protobuf:"bytes,1,opt,name=channelgroup_ref,json=channelgroupRef,proto3" json:"channelgroup_ref,omitempty"`
	ChannelpartitionRef  string            `protobuf:"bytes,2,opt,name=channelpartition_ref,json=channelpartitionRef,proto3" json:"channelpartition_ref,omitempty"`
	ChannelpairType      string            `protobuf:"bytes,3,opt,name=channelpair_type,json=channelpairType,proto3" json:"channelpair_type,omitempty"`
	ChannelpairLinerate  string            `protobuf:"bytes,4,opt,name=channelpair_linerate,json=channelpairLinerate,proto3" json:"channelpair_linerate,omitempty"`
	GponPonidInterval    uint32            `protobuf:"varint,5,opt,name=gpon_ponid_interval,json=gponPonidInterval,proto3" json:"gpon_ponid_interval,omitempty"`
	GponPonidOdnClass    PonIdOdnClassType `protobuf:"varint,6,opt,name=gpon_ponid_odn_class,json=gponPonidOdnClass,proto3,enum=bbf_fiber_types.PonIdOdnClassType" json:"gpon_ponid_odn_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChannelpairConfigData) Reset()         { *m = ChannelpairConfigData{} }
func (m *ChannelpairConfigData) String() string { return proto.CompactTextString(m) }
func (*ChannelpairConfigData) ProtoMessage()    {}
func (*ChannelpairConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e895fd86e230925f, []int{0}
}

func (m *ChannelpairConfigData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelpairConfigData.Unmarshal(m, b)
}
func (m *ChannelpairConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelpairConfigData.Marshal(b, m, deterministic)
}
func (m *ChannelpairConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelpairConfigData.Merge(m, src)
}
func (m *ChannelpairConfigData) XXX_Size() int {
	return xxx_messageInfo_ChannelpairConfigData.Size(m)
}
func (m *ChannelpairConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelpairConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelpairConfigData proto.InternalMessageInfo

func (m *ChannelpairConfigData) GetChannelgroupRef() string {
	if m != nil {
		return m.ChannelgroupRef
	}
	return ""
}

func (m *ChannelpairConfigData) GetChannelpartitionRef() string {
	if m != nil {
		return m.ChannelpartitionRef
	}
	return ""
}

func (m *ChannelpairConfigData) GetChannelpairType() string {
	if m != nil {
		return m.ChannelpairType
	}
	return ""
}

func (m *ChannelpairConfigData) GetChannelpairLinerate() string {
	if m != nil {
		return m.ChannelpairLinerate
	}
	return ""
}

func (m *ChannelpairConfigData) GetGponPonidInterval() uint32 {
	if m != nil {
		return m.GponPonidInterval
	}
	return 0
}

func (m *ChannelpairConfigData) GetGponPonidOdnClass() PonIdOdnClassType {
	if m != nil {
		return m.GponPonidOdnClass
	}
	return PonIdOdnClassType_CLASS_A
}

type ChannelpairOperData struct {
	ActualDownstreamLambda uint32   `protobuf:"varint,1,opt,name=actual_downstream_lambda,json=actualDownstreamLambda,proto3" json:"actual_downstream_lambda,omitempty"`
	PrimaryCtAssigned      bool     `protobuf:"varint,2,opt,name=primary_ct_assigned,json=primaryCtAssigned,proto3" json:"primary_ct_assigned,omitempty"`
	SecondaryCtAssigned    bool     `protobuf:"varint,3,opt,name=secondary_ct_assigned,json=secondaryCtAssigned,proto3" json:"secondary_ct_assigned,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ChannelpairOperData) Reset()         { *m = ChannelpairOperData{} }
func (m *ChannelpairOperData) String() string { return proto.CompactTextString(m) }
func (*ChannelpairOperData) ProtoMessage()    {}
func (*ChannelpairOperData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e895fd86e230925f, []int{1}
}

func (m *ChannelpairOperData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelpairOperData.Unmarshal(m, b)
}
func (m *ChannelpairOperData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelpairOperData.Marshal(b, m, deterministic)
}
func (m *ChannelpairOperData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelpairOperData.Merge(m, src)
}
func (m *ChannelpairOperData) XXX_Size() int {
	return xxx_messageInfo_ChannelpairOperData.Size(m)
}
func (m *ChannelpairOperData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelpairOperData.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelpairOperData proto.InternalMessageInfo

func (m *ChannelpairOperData) GetActualDownstreamLambda() uint32 {
	if m != nil {
		return m.ActualDownstreamLambda
	}
	return 0
}

func (m *ChannelpairOperData) GetPrimaryCtAssigned() bool {
	if m != nil {
		return m.PrimaryCtAssigned
	}
	return false
}

func (m *ChannelpairOperData) GetSecondaryCtAssigned() bool {
	if m != nil {
		return m.SecondaryCtAssigned
	}
	return false
}

func init() {
	proto.RegisterType((*ChannelpairConfigData)(nil), "bbf_fiber.ChannelpairConfigData")
	proto.RegisterType((*ChannelpairOperData)(nil), "bbf_fiber.ChannelpairOperData")
}

func init() {
	proto.RegisterFile("voltha_protos/bbf_fiber_channelpair_body.proto", fileDescriptor_e895fd86e230925f)
}

var fileDescriptor_e895fd86e230925f = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0xef, 0xd2, 0x30,
	0x18, 0xc6, 0x33, 0x50, 0x22, 0x4d, 0x50, 0xd9, 0xc0, 0x2c, 0x9e, 0x08, 0x5e, 0xf0, 0xe0, 0x50,
	0xbc, 0x78, 0xd5, 0x71, 0x21, 0x21, 0x81, 0x4c, 0x4f, 0x5e, 0x9a, 0x6e, 0xed, 0x46, 0x93, 0xad,
	0x6f, 0xd3, 0x16, 0xcc, 0x3e, 0x97, 0x5f, 0xc6, 0x8f, 0x63, 0x5a, 0xf6, 0xdf, 0xc6, 0x92, 0xff,
	0xf5, 0xfd, 0x3d, 0xcf, 0xd3, 0xb7, 0x4f, 0x5e, 0x14, 0xdd, 0xa0, 0x34, 0x17, 0x82, 0xa5, 0x02,
	0x03, 0x7a, 0x9b, 0xa6, 0x39, 0xce, 0x79, 0xca, 0x14, 0xce, 0x2e, 0x44, 0x08, 0x56, 0x4a, 0xc2,
	0x15, 0x4e, 0x81, 0xd6, 0x91, 0x53, 0xf8, 0xd3, 0x56, 0xf1, 0xfe, 0xc3, 0x73, 0x56, 0x53, 0x4b,
	0xa6, 0xef, 0xfa, 0xf5, 0xbf, 0x11, 0x5a, 0xc6, 0x5d, 0x54, 0x0c, 0x22, 0xe7, 0xc5, 0x9e, 0x18,
	0xe2, 0x7f, 0x44, 0x6f, 0x9b, 0x37, 0x0a, 0x05, 0x57, 0x89, 0x15, 0xcb, 0x43, 0x6f, 0xe5, 0x6d,
	0xa6, 0xc9, 0x9b, 0xfe, 0x3c, 0x61, 0xb9, 0xff, 0x05, 0x2d, 0xda, 0x75, 0x94, 0xe1, 0x86, 0x83,
	0x70, 0xf2, 0x91, 0x93, 0x07, 0x43, 0x66, 0x2d, 0x5d, 0xba, 0xfb, 0x81, 0x5d, 0x29, 0x1c, 0x3f,
	0xa4, 0xdb, 0xf9, 0xaf, 0x5a, 0xb2, 0x87, 0x74, 0xae, 0x70, 0xc9, 0x05, 0x53, 0xc4, 0xb0, 0xf0,
	0xc5, 0x20, 0x9d, 0xab, 0x63, 0x83, 0xfc, 0x08, 0x05, 0x85, 0x04, 0x81, 0x25, 0x08, 0x4e, 0x31,
	0x17, 0x86, 0xa9, 0x1b, 0x29, 0xc3, 0x97, 0x2b, 0x6f, 0x33, 0x4b, 0xe6, 0x16, 0x9d, 0x2d, 0x39,
	0x34, 0xc0, 0xff, 0x89, 0x16, 0x3d, 0x3d, 0x50, 0x81, 0xb3, 0x92, 0x68, 0x1d, 0x4e, 0x56, 0xde,
	0xe6, 0xf5, 0x6e, 0x1d, 0x0d, 0xbb, 0x3b, 0x83, 0x38, 0xd0, 0x13, 0x15, 0xb1, 0x55, 0xd9, 0x25,
	0x7b, 0xa1, 0x4f, 0xe3, 0xf5, 0x5f, 0x0f, 0x05, 0xbd, 0x6a, 0x4f, 0x92, 0x29, 0x57, 0xec, 0x37,
	0x14, 0x92, 0xcc, 0x5c, 0x49, 0x89, 0x29, 0xfc, 0x11, 0xda, 0x28, 0x46, 0x2a, 0x5c, 0x92, 0x2a,
	0xa5, 0xc4, 0x15, 0x3c, 0x4b, 0xde, 0xdd, 0xf9, 0xbe, 0xc5, 0x47, 0x47, 0xed, 0xb7, 0xa4, 0xe2,
	0x15, 0x51, 0x35, 0xce, 0x0c, 0x26, 0x5a, 0xf3, 0x42, 0x30, 0xea, 0x6a, 0x7e, 0x95, 0xcc, 0x1b,
	0x14, 0x9b, 0xef, 0x0d, 0xf0, 0x77, 0x68, 0xa9, 0x59, 0x06, 0x82, 0x0e, 0x1d, 0x63, 0xe7, 0x08,
	0x5a, 0xd8, 0x79, 0x7e, 0x7c, 0xfe, 0x1d, 0x15, 0xdc, 0x5c, 0xae, 0x69, 0x94, 0x41, 0xb5, 0x05,
	0xc9, 0x44, 0x06, 0x8a, 0x6e, 0xef, 0xb7, 0xf4, 0xa9, 0xb9, 0xa5, 0x02, 0xba, 0x73, 0x4a, 0x27,
	0x6e, 0xf8, 0xf5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x5d, 0x17, 0x89, 0xab, 0x02, 0x00,
	0x00,
}
